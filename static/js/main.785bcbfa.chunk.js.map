{"version":3,"sources":["Assets/Img/loader.svg","config.js","Utils/apollo.js","Utils/auth.js","Components/Common/Loader.js","Containers/GithubCallback.js","Components/Header/HeaderContainer.js","Components/Header/HeaderWrapper.js","Components/Header/HeaderTitle.js","Components/Header/Header.js","Components/Blog/BlogContainer.js","Components/Blog/Card/CardContainer.js","Components/Blog/Card/CardHeader.js","Components/Blog/Card/CardCategory.js","Components/Blog/Card/CardTitle.js","Components/Blog/Card/CardDescription.js","Components/Blog/Card/Card.js","Containers/Blog.js","Application.js","serviceWorker.js","index.js"],"names":["module","exports","config","client","ApolloClient","uri","request","operation","setContext","headers","authorization","atob","getAuthenticatedUser","a","async","token","localStorage","getItem","fetch","Headers","response","json","result","LoaderContainer","styled","span","Loader","src","loader","alt","enableOAuth","OAuthClientID","OAuthSecret","GithubCallback","useState","loading","setLoading","useEffect","code","method","body","URLSearchParams","client_id","client_secret","authenticate","window","location","search","get","then","setItem","access_token","login","setUsername","replace","origin","pathname","HeaderContainer","div","HeaderWrapper","HeaderTitle","h1","Header","BlogContainer","CardContainer","CardHeader","StyledCategory","CardCategory","value","key","id","style","backgroundColor","color","name","CardTitle","h2","Card","blog","labels","setLabels","nodes","filter","map","i","title","GET_POSTS","gql","Blog","posts","setPosts","useQuery","error","data","console","repository","issues","v","Application","Helmet","charSet","content","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","addEventListener","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.785bcbfa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.65f8709d.svg\";","export const config = {\n  // Your Github Converted Token To Know How To Get Your Token Look at Readme.md\n  githubConvertedToken: \"MTkzNTIzNGY2NzUyNTM5MWRlYmYwNGI2Y2Y0Mjg1N2E4NjNlMDQ0MQ==\",\n\n  // Your Github UserName\n  githubUserName: \"leenahere\",\n\n  // Your Github Repo Name Where You Have your issues as Blog\n  githubRepo: \"thoughts\",\n\n  // Set it to true if you have a Github app to add to this project\n  // and fill the client ID & secret\n  enableOAuth: true,\n  OAuthClientID: 'Iv1.e8564a061b521c29',\n  OAuthSecret: 'a403ff2624cd61cdf7b1d3b6c37cf78882b00f4c',\n\n  // Your Personal Blog Title\n  title : \"thoughts\" ,\n\n  // Your Personal Blog Subtitle\n  subtitle : \"\",\n\n  // Header customization\n  header: {\n    backgroundColor: '#f1f6f8', // can be a CSS gradient\n    titleColor: '#ce4d12',\n    subtitleColor: '#37474f',\n  },\n};\n","import ApolloClient from \"apollo-boost\";\n\nimport { config } from '../config'\n\nexport const client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${atob(config.githubConvertedToken)}`\n      }\n    });\n  }\n});\n\nexport const userClient = (token) => new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: operation => {\n    operation.setContext({\n      headers: {\n        authorization: `Bearer ${token}`\n      }\n    });\n  }\n});","export const getToken = () => {\n  return localStorage.getItem('githubToken');\n}\n\nexport const getAuthenticatedUser = async () => {\n  const token = localStorage.getItem('githubToken');\n  if (token) {\n    const response = await fetch('https://api.github.com/user', {\n      headers: new Headers({\n        authorization: `Bearer ${token}`\n      }),\n    });\n    const result = await response.json();\n    result.token = token;\n    return result;\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\n\nimport loader from '../../Assets/Img/loader.svg'\n\nconst LoaderContainer = styled.span`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  img {\n    height: 128px;\n  }\n`\n\nexport const Loader = () => (\n  <LoaderContainer>\n    <img src={loader} alt=\"Loading...\" />\n  </LoaderContainer>\n)","import React, { useEffect, useState } from 'react'\n\nimport { config } from '../config'\nimport { getAuthenticatedUser } from '../Utils/auth'\nimport { Loader } from '../Components/Common/Loader'\n\nconst { enableOAuth, OAuthClientID, OAuthSecret } = config\n\nconst GithubCallback = () => {\n  const [loading, setLoading] = useState(true)\n\n  const authenticate = async (code) => {\n    // Apparently we need to use a proxy to make this request (CORS blocked for client-side only applications)\n    const response = await fetch('https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token', {\n      method: 'POST',\n      body: new URLSearchParams({\n        client_id: OAuthClientID,\n        client_secret: OAuthSecret,\n        code: code,\n      }),\n      headers: new Headers({\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }),\n    })\n\n    return response.json()\n  }\n\n  const setUsername = async () => {\n    const { login } = await getAuthenticatedUser()\n    localStorage.setItem('githubUsername', login)\n  }\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    authenticate(urlParams.get('code'))\n    .then((response) => {\n      if (response) {\n        localStorage.setItem('githubToken', response.access_token)\n        setUsername().then(() => setLoading(false))\n      }\n    })\n  }, [])\n\n  if (!enableOAuth || !loading) {\n    return window.location.replace(window.location.origin + window.location.pathname);\n  }\n\n  return <Loader />\n}\n\nexport default GithubCallback\n","import styled from 'styled-components'\n\nexport const HeaderContainer = styled.div`\n  position: relative;\n  padding: 2em;\n  text-align: center;\n`","import styled from 'styled-components'\n\nexport const HeaderWrapper = styled.div`\n  margin: 0 auto;\n  padding: 0 .5em;\n  max-width: 1140px;\n  text-align: center;\n`","import styled from 'styled-components'\n\nexport const HeaderTitle = styled.h1`\n  font-weight: 700;\n  line-height: 1.15;\n  margin: 1.25rem 0;\n  font-size: 4.5em;\n  text-align: center;\n  color: #c9c5c7;\n\n  @media only screen and (max-width: 768px) {\n    font-size: 3em;\n  }\n`","import React from 'react'\n\nimport {\n    HeaderContainer,\n    HeaderWrapper,\n    HeaderTitle\n} from './'\nimport { config } from \"../../config\"\n\nexport const Header = () => {\n    return (\n        <HeaderContainer>\n            <HeaderWrapper>\n                <HeaderTitle>{config.title}</HeaderTitle>\n            </HeaderWrapper>\n        </HeaderContainer>\n    )\n}\n","import styled from 'styled-components'\n\nexport const BlogContainer = styled.div`\n  margin: 2rem auto 0;\n  width: 90%;\n  max-width: 700px;\n  padding: 20px 10px;\n`","import styled from 'styled-components'\n\nexport const CardContainer = styled.div`\n  margin: 2rem 2rem 2rem 2rem;\n  padding: 15px;\n  transition: 0.2s;\n  position: relative;\n  background-color: rgba(201, 197, 199, .4);\n  transition: all .2s ease-in-out;\n\n  :hover {\n    transform: scale(1.05);\n  }\n`","import styled from 'styled-components'\n\nexport const CardHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledCategory = styled.div`\n  display: inline-block;\n  background: #009bbb;\n  border-radius: 2px;\n  padding: 3px 8px;\n  font-size: 12px;\n  text-transform: lowercase;\n  color: #383537;\n  font-weight: 300;\n  line-height: 28px;\n  font-family: \"Quicksand\";\n  margin-right: 10px;\n`\n\nexport const CardCategory = ({ value }) => (\n  <StyledCategory\n    key={value.id}\n    style={{ backgroundColor: `#${value.color}` }}>\n    {value.name}\n  </StyledCategory>\n)","import styled from 'styled-components'\n\nexport const CardTitle = styled.h2`\n  font-size: 25px;\n`","import styled from 'styled-components'\n\nexport const CardDescription = styled.div`\n  font-size: 18px;\n  overflow: hidden;\n  -webkit-line-clamp: none;\n`","import React, { useState, useEffect } from \"react\";\nimport Markdown from \"markdown-to-jsx\";\n\nimport {\n  CardContainer,\n  CardHeader,\n  CardCategory,\n  CardTitle\n} from './'\n\nexport const Card = ({ blog }) => {\n  const [labels, setLabels] = useState([]);\n\n  useEffect(() => {\n    const labels = blog.labels.nodes.filter((value) => {\n      return value.name;\n    });\n\n    setLabels(labels);\n  }, [blog.labels.nodes]);\n\n  return (\n    <CardContainer>\n      <CardHeader>\n        <>\n        {labels.map((value, i) => {\n          return (\n            <CardCategory value={value} key={i} />\n          );\n        })}\n        </>\n      </CardHeader>\n      <div>\n        <CardTitle>{blog.title}</CardTitle>\n        <Markdown>\n            {blog.body}\n          </Markdown>\n      </div>\n    </CardContainer>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { config } from \"../config\";\nimport { Header } from \"../Components/Header\";\nimport { Loader } from '../Components/Common'\nimport { BlogContainer } from '../Components/Blog'\nimport { Card } from '../Components/Blog/Card'\n\nconst GET_POSTS = gql`\n{\n  repository(owner: \"${config.githubUserName}\", name: \"${config.githubRepo}\") {\n    issues(first: 100, states: OPEN, filterBy: { createdBy: \"leenahere\"}) {\n      nodes {\n        title\n        body\n        bodyHTML\n        bodyText\n        number\n        labels(first: 100) {\n          nodes {\n            color\n            name\n            id\n          }\n        }\n        author {\n          url\n          avatarUrl\n          login\n        }\n        updatedAt\n        id\n      }\n    }\n  }\n}\n`\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const { loading, error, data } = useQuery(GET_POSTS);\n\n  useEffect(() => {\n    if (!loading) {\n      if (error) {\n        console.error(error)\n      }\n\n      if (data) {\n        setPosts(data?.repository?.issues?.nodes)\n      }\n    }\n  }, [loading, error, data]);\n\n  return (\n    <>\n      <Header />\n      <BlogContainer>\n        {\n          loading\n          ? <Loader />\n          : posts.map((v, i) => {\n              return <Card blog={v} key={i} />;\n            })\n        }\n      </BlogContainer>\n    </>\n  );\n}\n\nexport default Blog;\n","import React from 'react'\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { Helmet } from \"react-helmet\";\n\nimport { config } from './config'\nimport { client } from './Utils/apollo';\nimport GithubCallback from './Containers/GithubCallback';\n\nimport Blog from \"./Containers/Blog\"\n\nconst Application = () => {\n  const urlParams = new URLSearchParams(window.location.search);\n\n  if (urlParams.get('code')) {\n    return <GithubCallback />\n  }\n\n  return (\n    <>\n      <Helmet>\n          <title>{config.title}</title>\n          <meta charSet=\"utf-8\" />\n          <meta name=\"description\" content={config.subtitle} />\n      </Helmet>\n      <ApolloProvider client={client}>\n        <Blog />\n      </ApolloProvider>\n    </>\n  )\n};\n\nexport default Application;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Application from './Application';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<Application />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nif(process.env.NODE_ENV === 'production') serviceWorker.register();\nelse serviceWorker.unregister();\n\n"],"sourceRoot":""}